
<project name="openfast4j" default="all">

	<property name="src.dir" value="src" />
	<property name="lib" value="${basedir}/lib" />
	<property name="demo.dir" value="demo" />
	<property name="test.dir" value="test" />
	<property name="test.unit.dir" value="${test.dir}/unit" />
	<property name="test.acceptance.dir" value="${test.dir}/acceptance" />

	<property name="build.dir" value="build" />

	<property name="work.dir" value="${build.dir}/work" />
	<property name="build.classes.dir" value="${work.dir}/classes" />
	<property name="build.test.classes.dir" value="${work.dir}/test-classes" />
	<property name="instr.dir" value="${work.dir}/instr" />

	<property name="docs.dir" value="${build.dir}/docs" />
	<property name="dist.dir" value="${build.dir}/dist" />
	<property name="reports.dir" value="${build.dir}/reports" />

	<property name="javadoc.dir" value="${docs.dir}/api" />
	<property name="reports.unit" value="${reports.dir}/unit" />
	<property name="reports.coverage" value="${reports.dir}/coverage" />
	<property name="reports.dependency" value="${reports.dir}/dependency" />
	<property name="reports.complexity" value="${reports.dir}/complexity" />
	
	<path id="lib.emma.path">
		<pathelement location="${lib}/emma-2.0.5312/emma_ant.jar"/>
		<pathelement location="${lib}/emma-2.0.5312/emma.jar"/>
	</path>
	
	<path id="lib.pmd.path">
		<pathelement location="${lib}/pmd-3.9/pmd-3.9.jar"/>
		<pathelement location="${lib}/pmd-3.9/asm-3.0.jar"/>
		<pathelement location="${lib}/pmd-3.9/jaxen-1.1.jar"/>
		<pathelement location="${lib}/pmd-3.9/backport-util-concurrent.jar"/>
	</path>
	
	<path id="lib.junit.path">
		<pathelement location="${lib}/junit-3.8.1/junit.jar"/>
	</path>

	<path id="test.path">
		<pathelement location="${build.classes.dir}" />
		<pathelement location="${build.test.classes.dir}" />
		<path refid="lib.junit.path" />
		<path refid="lib.emma.path" />
	</path>

	<path id="emma.test.path">
		<pathelement location="${instr.dir}" />
		<path refid="test.path" />
	</path>

	<path id="build.classpath">
		<pathelement location="${build.classes.dir}" />
	</path>

	<target name="compile">
		<mkdir dir="${build.classes.dir}" />
		<javac srcdir="${src.dir}" destdir="${build.classes.dir}" debug="yes" debuglevel="lines,source,vars" target="1.4" source="1.4">
			<compilerarg line="-Xlint:deprecation -Xlint:unchecked"/>
		</javac>
	</target>

	<target name="compile-test" depends="compile">
		<mkdir dir="${build.test.classes.dir}" />
		<javac srcdir="${test.unit.dir}" destdir="${build.test.classes.dir}" classpathref="test.path" debug="yes" debuglevel="lines,source,vars" target="1.4" source="1.4">
			<compilerarg line="-Xlint:deprecation -Xlint:unchecked"/>
		</javac>
		<javac srcdir="${test.acceptance.dir}" destdir="${build.test.classes.dir}" classpathref="test.path" debug="yes" debuglevel="lines,source,vars" target="1.4" source="1.4">
			<compilerarg line="-Xlint:deprecation -Xlint:unchecked"/>
		</javac>
		<copy todir="${build.test.classes.dir}">
			<fileset dir="${test.unit.dir}" excludes="**/*.java" includes="**/*" />
			<fileset dir="${test.acceptance.dir}" excludes="**/*.java" includes="**/*" />
		</copy>
	</target>

	<target name="jar" depends="compile, compile-test">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/${ant.project.name}.jar" basedir="${build.classes.dir}" includes="**/*.class" />
	</target>

	<target name="instr" depends="jar">
		<mkdir dir="${reports.coverage}" />
		<taskdef resource="emma_ant.properties" classpathref="lib.emma.path"/>
		<emma>
			<instr instrpathref="build.classpath" destdir="${instr.dir}" metadatafile="${work.dir}/metadata.emma" merge="true" />
		</emma>
	</target>

	<target name="unit-test" depends="instr">
		<mkdir dir="${reports.unit}" />
		<junit showoutput="yes" printsummary="yes" haltonerror="yes" haltonfailure="yes" fork="false">
			<classpath refid="emma.test.path" />
			<sysproperty key="emma.coverage.out.file" value="${work.dir}/coverage.emma" />
			<sysproperty key="emma.coverage.out.merge" value="true" />
			<jvmarg line="-ea" />
			<batchtest todir="${reports.unit}">
				<fileset includes="**/*Test.java" dir="${test.unit.dir}" />
				<fileset includes="**/*Test.java" dir="${test.acceptance.dir}" />
				<formatter type="xml" usefile="true" />
			</batchtest>
			<formatter type="xml" />
		</junit>
	</target>

	<target name="coverage-report" depends="unit-test">
		<emma>
			<report sourcepath="${src.dir}">
				<fileset dir="${work.dir}">
					<include name="*.emma" />
				</fileset>
				<html outfile="${reports.coverage}/coverage.html" />
			</report>
		</emma>
	</target>

	<condition property="jdepend.not.installed">
		<not>
			<available file="${ant.home}/lib/jdepend-2.9.jar"/>
		</not>
	</condition>
	
	<target name="install-jdepend" if="jdepend.not.installed">
		<copy todir="${ant.home}/lib" file="${lib}/jdepend-2.9/jdepend-2.9.jar"/>
		<fail message="The jdepend library was not present in your Ant distribution prior to running.  It has now been successfully installed.  Please rerun the ant build."/>
	</target>
	
	<target name="jdepend" depends="install-jdepend, jar">
		<mkdir dir="${reports.dependency}"/>
		<jdepend outputfile="${reports.dependency}/jdepend-report.xml" format="xml">
			<exclude name="java.*" />
			<exclude name="javax.*" />
			<classespath>
				<pathelement location="${build.classes.dir}" />
			</classespath>
			<classpath location="${build.classes.dir}" />
		</jdepend>

		<xslt basedir="${reports.dependency}" destdir="${reports.dependency}" includes="jdepend-report.xml" style="${ant.home}/etc/jdepend.xsl" />
	</target>
	
	<target name="complexity">
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="lib.pmd.path" />
		<mkdir dir="${reports.complexity}"/>
		<pmd rulesetfiles="basic,design">
			<formatter type="xml" toFile="${reports.complexity}/pmd.xml" />
			<fileset dir="${src.dir}"/>
		</pmd>
		<xslt in="${reports.complexity}/pmd.xml" out="${reports.complexity}/pmd.html" style="${lib}/pmd-3.9/pmd-report-per-class.xslt"/>
		<copy file="${lib}/pmd-3.9/sorttable.js" todir="${reports.complexity}"/>
		<copy file="${lib}/pmd-3.9/arrow_up.gif" todir="${reports.complexity}"/>
		<copy file="${lib}/pmd-3.9/arrow_down.gif" todir="${reports.complexity}"/>
	</target>

	<target name="javadoc">
		<javadoc destdir="${javadoc.dir}" author="true" version="true" windowtitle="OpenFAST Documentation">
			<packageset dir="${src.dir}">
			</packageset>
		</javadoc>
	</target>
	
	<target name="dist" depends="jar,javadoc,post-clean">
		<mkdir dir="${work.dir}/dist"/>
		<copy todir="${work.dir}/dist/src">
			<fileset dir="${src.dir}"/>
		</copy>
		<copy todir="${work.dir}/dist/doc">
			<fileset dir="${docs.dir}"/>
		</copy>
		<copy todir="${work.dir}/dist/test">
			<fileset dir="${test.dir}"/>
		</copy>
		<copy todir="${work.dir}/dist/lib">
			<fileset dir="${lib}"/>
		</copy>
		<mkdir dir="${work.dir}/dist/dist"/>
		<copy todir="${work.dir}/dist/dist" file="${dist.dir}/${ant.project.name}.jar"/>
		<copy todir="${work.dir}/dist" file="license.txt"/>
		<copy todir="${work.dir}/dist" file="build.xml"/>
		<zip destfile="${dist.dir}/${ant.project.name}.zip" basedir="${work.dir}/dist"/>
		<zip destfile="${dist.dir}/${ant.project.name}.zip" basedir="${work.dir}/dist"/>
		<tar destfile="${dist.dir}/${ant.project.name}.tar.gz" basedir="${work.dir}/dist" compression="gzip"/>
	</target>

	<target name="all" depends="clean, jdepend, complexity, coverage-report, javadoc, dist, post-clean" description="builds and tests everything" />

	<target name="clean">
		<delete dir="${build.dir}" />
	</target>

	<target name="post-clean">
		<delete dir="${work.dir}" />
	</target>
</project>

